#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
var app = require('../app');
var debug = require('debug')('whale-tracker:server');
var http = require('http');

const WebSocket = require('ws');
const trade = require('../lib/trades');
const wall = require('../lib/orders');
const {getPairs} = require('../lib/pairs');
const exchanges = require('../config.js').exchanges;


// ========================================== WebSockets ========================================
let sockets = {}

const buildBinanceSocket = () => {
  let stream = "";
  getPairs("binance").forEach((pair, index) => {
    pair = pair.toLowerCase();
    if(index != 0)
      stream += "/";
  
    stream += `${pair}@aggTrade/${pair}@depth`;
  });
  return stream;
}

if(exchanges.binance) {
  sockets.binance = new WebSocket('wss://stream.binance.com:9443/stream?streams='+ buildBinanceSocket());
  
  const refreshStream = () => {
    sockets.binance = new WebSocket('wss://stream.binance.com:9443/stream?streams='+ buildBinanceSocket());  
  }
  
  // Binance API documentation says the streams expire after 24 hours.
  // Re-subscribing to the stream after 20 hours
  setInterval(refreshStream, 72000000);
  
  sockets.binance.on('message', function(data) {
    let obj = JSON.parse(data).data;
    if(obj.e == "aggTrade")
      trade.binance(obj);
    else if(obj.e == "depthUpdate")
      wall.binance(obj);
  });
}

if(exchanges.bitfinex) {
  sockets.bitfinex = new WebSocket('wss://api.bitfinex.com/ws/2'),

  sockets.bitfinex.on('open', () => {
    const symbols = getPairs();
  
    let request_object = { 
      event: "subscribe", 
      channel: "trades", 
      symbol: "" 
    }
  
    symbols.forEach(symbol => {
      request_object.symbol = symbol;
      sockets.bitfinex.send(JSON.stringify(request_object))
    });
  
    request_object = { 
      event: "subscribe", 
      channel: "book", 
      symbol: "",
      prec: "P0", // Aggregation of price levels
      freq: "F1", // Frequency of stream: F1 - Every 2 seconds
      length: "25"  
    }
  
    symbols.forEach(symbol => {
      request_object.symbol = symbol;
      sockets.bitfinex.send(JSON.stringify(request_object))
    });
  
  });
  
  sockets.bitfinex.on('message', (data) => {
    let obj = JSON.parse(data);
    if(obj.channel == "trades" || obj[2] != undefined)
      trade.bitfinex(obj);
    else if(obj.event != "info") {
      wall.bitfinex(obj);
    }
  });

}

if(exchanges.coinbase) {
  sockets.coinbase = new WebSocket('wss://ws-feed.pro.coinbase.com')

  sockets.coinbase.on('open', () => {
 
    let request_object = {     
      "type": "subscribe",     
      "product_ids": getPairs("coinbase"),     
      "channels": ["matches"] 
    }
  
    sockets.coinbase.send(JSON.stringify(request_object))
  
    request_object.channels = ["level2"];
    sockets.coinbase.send(JSON.stringify(request_object))
  });
  
  sockets.coinbase.on('message', (data) => {
    let obj = JSON.parse(data);
    if(obj.type == "last_match" || obj.type == "match")
      trade.coinbase(obj);
    // else if(obj.type == "l2update")
      // wall.coinbase(obj);
  })
}


// sockets.binance.close();
// sockets.bitfinex.close();
// soclets.coinbase.close();

// ========================================== WebSockets ========================================


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
