#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('whale-tracker:server');
var http = require('http');

const trade = require('./trade');
const WebSocket = require('ws');

const trade_history = {
  btc_binance: new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@aggTrade'),
  eos_binance: new WebSocket('wss://stream.binance.com:9443/ws/eosusdt@aggTrade'),
  eth_binance: new WebSocket('wss://stream.binance.com:9443/ws/ethusdt@aggTrade'),
  bitfinex: new WebSocket('wss://api.bitfinex.com/ws/2'),
  gdax: new WebSocket('wss://ws-feed.gdax.com')
};

const refreshStream = () => {
  trade_history.btc_binance = new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@aggTrade');
  trade_history.eos_binance = new WebSocket('wss://stream.binance.com:9443/ws/eosusdt@aggTrade');
  trade_history.eth_binance = new WebSocket('wss://stream.binance.com:9443/ws/ethusdt@aggTrade');
}

setInterval(refreshStream, 72000000);


trade_history.btc_binance.on('message', function incoming(data) {
  trade.binance(data);
});

trade_history.bitfinex.on('open', () => {
  let request_object = { 
    event: "subscribe", 
    channel: "trades", 
    symbol: "BTCUSD" 
  }
  trade_history.bitfinex.send(JSON.stringify(request_object))

  request_object.symbol = "EOSUSD";
  trade_history.bitfinex.send(JSON.stringify(request_object))

  request_object.symbol = "LTCUSD";
  trade_history.bitfinex.send(JSON.stringify(request_object))

  request_object.symbol = "ETHUSD";
  trade_history.bitfinex.send(JSON.stringify(request_object))


});

trade_history.bitfinex.on('message', (data) => {
  trade.bitfinex(data);
})


trade_history.gdax.on('open', () => {
  let request_object = {     
    "type": "subscribe",     
    "product_ids": [         
        "BTC-USD",
        "LTC-USD",
        "ETH-USD"
     ],     
     "channels": ["matches"] 
  }

  trade_history.gdax.send(JSON.stringify(request_object))

})

trade_history.gdax.on('message', (data) => {
  trade.gdax(data);
})



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
